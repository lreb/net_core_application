<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Net.Core.Api</name>
    </assembly>
    <members>
        <member name="T:Net.Core.Api.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:Net.Core.Api.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Net.Core.Api.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Net.Core.Api.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            
            </summary>
            <param name="env"></param>
        </member>
        <member name="P:Net.Core.Api.Startup.Configuration">
            <summary>
            It represents the root of the configuration file that was formerly represented by the web.config file.
            It represents all of the configuration necessary to run the app.
            </summary>
        </member>
        <member name="M:Net.Core.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices exists for the explicit reason of adding services to ASP.NET. ASP.NET Core supports Dependency Injection natively, 
            and as such this method is adding services to the DI container
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Net.Core.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            You use this method to tell ASP.NET what frameworks you would like to use for this app. This allows you full, detailed control over the HTTP pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Net.Core.Api.Startup.GetXmlCommentsPath">
            <summary>
            This code to get XML path will work in your local environment as well as in production environment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.Core.Api.Controllers.ValuesController.Get(System.Int32,Net.Core.Api.Controllers.ValuesController.eValueType)">
            <summary>
            Get API values by ID
            </summary>
            <param name="id"></param>
            <param name="type">Type of Value</param>
            <returns></returns>
        </member>
        <member name="M:Net.Core.Api.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            Delete API Value
            </summary>
            <remarks>This API will delete the values.</remarks>
            <param name="id"></param>
        </member>
    </members>
</doc>
